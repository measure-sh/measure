# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# template for the changelog footer
header = """
# Changelog\n
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}\n
{% for group, commits in commits | group_by(attribute="group") %}
    {% if commits|length > 0 %}### {{ group | striptags | trim | upper_first }}\n{% endif -%}
    {% for scope, commits in commits | filter(attribute="merge_commit", value=false) | group_by(attribute="scope") %}{% for commit in commits %}
            - {% if commit.scope != "other" %}(**{{ commit.scope }}**): {% endif %}\
            {{ commit.message | upper_first }}\
            {% if commit.remote.username %} by @{{ commit.remote.username }}{%- endif %}\
            {% if commit.remote.pr_number %} in #{{ commit.remote.pr_number }}{%- endif -%}
        {%- endfor -%}
    {% endfor %}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
                    /compare/{{ release.previous.version }}..{{ release.version }}
        {% endif -%}
    {% else -%}
        [unreleased]: https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
            /compare/{{ release.previous.version }}..HEAD
    {% endif -%}
{% endfor %}
"""
# remove the leading and trailing whitespace from the templates
trim = true

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^ci:", skip = true },
  { message = "^.*\\(android\\):", skip = true },
  { message = "^.*\\(gradle\\):", skip = true },
  { message = "^.*\\(ios\\):", skip = true },
  { message = "^.*\\(flutter\\):", skip = true },
  { message = "^.*\\(rn\\):", skip = true },
  { message = "^docs", group = "<!-- 7 -->:books: Documentation", default_scope = "other" },
  { message = "^chore", group = "<!-- 2 -->:hammer: Misc", default_scope = "other" },
  { message = "^feat", group = "<!-- 0 -->:sparkles: New features" },
  { message = "^test", group = "<!-- 3 -->:test_tube: Testing", skip = true },
  { message = "^fix", group = "<!-- 1 -->:bug: Bug fixes" },
  { message = "^perf", group = "<!-- 4 -->:zap: Performance" },
  { message = "^refactor", group = "<!-- 5 -->:recycle: Refactor" },
  { message = "^.*: remove", group = "<!-- 6 -->:coffin: Removed" },
  { message = "^.*: delete", group = "<!-- 6 -->:coffin: Removed" },
  { message = "^.*", group = "<!-- 2 -->:hammer: Misc" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = true
# regex for matching git tags
tag_pattern = "v[0-9].*"
# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = "^(android|ios|flutter|rn)"
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
