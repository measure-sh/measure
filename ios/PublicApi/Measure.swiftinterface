// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios12-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-experimental-feature OpaqueTypeErasure -enable-bare-slash-regex -module-name Measure
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CoreData
import CoreTelephony
import CrashReporter
import Foundation
import MachO
import Network
import Photos
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
import os.signpost
public enum AttributeValue {
  case string(Swift.String)
  case boolean(Swift.Bool)
  case int(Swift.Int)
  case long(Swift.Int64)
  case float(Swift.Float)
  case double(Swift.Double)
}
extension Measure.AttributeValue : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc final public class BaseMeasureConfig : ObjectiveC.NSObject {
  public init(enableLogging: Swift.Bool? = nil, samplingRateForErrorFreeSessions: Swift.Float? = nil, traceSamplingRate: Swift.Float? = nil, trackHttpHeaders: Swift.Bool? = nil, trackHttpBody: Swift.Bool? = nil, httpHeadersBlocklist: [Swift.String]? = nil, httpUrlBlocklist: [Swift.String]? = nil, httpUrlAllowlist: [Swift.String]? = nil, autoStart: Swift.Bool? = nil)
  @objc deinit
}
public protocol Span {
  var traceId: Swift.String { get }
  var spanId: Swift.String { get }
  var parentId: Swift.String? { get }
  var isSampled: Swift.Bool { get }
  @discardableResult
  func setStatus(_ status: Measure.SpanStatus) -> any Measure.Span
  @discardableResult
  func setParent(_ parentSpan: any Measure.Span) -> any Measure.Span
  @discardableResult
  func setCheckpoint(_ name: Swift.String) -> any Measure.Span
  @discardableResult
  func setName(_ name: Swift.String) -> any Measure.Span
  @discardableResult
  func setAttribute(_ key: Swift.String, value: Swift.String) -> any Measure.Span
  @discardableResult
  func setAttribute(_ key: Swift.String, value: Swift.Int) -> any Measure.Span
  @discardableResult
  func setAttribute(_ key: Swift.String, value: Swift.Double) -> any Measure.Span
  @discardableResult
  func setAttribute(_ key: Swift.String, value: Swift.Bool) -> any Measure.Span
  @discardableResult
  func setAttributes(_ attributes: [Swift.String : Measure.AttributeValue]) -> any Measure.Span
  @discardableResult
  func removeAttribute(_ key: Swift.String) -> any Measure.Span
  @discardableResult
  func end() -> any Measure.Span
  @discardableResult
  func end(timestamp: Swift.Int64) -> any Measure.Span
  func hasEnded() -> Swift.Bool
  func getDuration() -> Swift.Int64
}
public enum SpanStatus : Swift.Int64, Swift.Codable {
  case unset
  case ok
  case error
  public init?(rawValue: Swift.Int64)
  public typealias RawValue = Swift.Int64
  public var rawValue: Swift.Int64 {
    get
  }
}
public protocol SpanBuilder {
  func setParent(_ span: any Measure.Span) -> any Measure.SpanBuilder
  func startSpan() -> any Measure.Span
  func startSpan(_ timestamp: Swift.Int64) -> any Measure.Span
}
@_inheritsConvenienceInitializers @objc(BatchOb) public class BatchOb : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Measure.BatchOb {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Measure.BatchOb>
  @objc @NSManaged dynamic public var batchId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var createdAt: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var eventId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var spanIds: Swift.String? {
    @objc get
    @objc set
  }
}
@objc final public class ClientInfo : ObjectiveC.NSObject {
  @objc public init(apiKey: Swift.String, apiUrl: Swift.String)
  @objc deinit
}
@objc public enum VCLifecycleEventType : Swift.Int, Swift.Codable {
  case viewDidLoad = 0
  case viewWillAppear = 1
  case viewDidAppear = 2
  case viewWillDisappear = 3
  case viewDidDisappear = 4
  case didReceiveMemoryWarning = 5
  case initWithNibName = 6
  case initWithCoder = 7
  case loadView = 8
  case vcDeinit = 9
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 13, macOS 10.15, tvOS 13, watchOS 6.0, *)
@_Concurrency.MainActor @preconcurrency public struct MsrMoniterView<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(_ viewName: Swift.String? = nil, content: @escaping () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13, tvOS 13, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7Measure14MsrMoniterViewV4bodyQrvp", 0) __<Content>
}
@available(iOS 13, macOS 10.15, tvOS 13, watchOS 6.0, *)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func moniterWithMsr(_ viewName: Swift.String? = nil) -> some SwiftUICore.View
  
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class Measure : ObjectiveC.NSObject {
  @objc public static let shared: Measure.Measure
  @objc final public func initialize(with client: Measure.ClientInfo, config: Measure.BaseMeasureConfig? = nil)
  @objc final public func start()
  @objc final public func stop()
  final public func trackEvent(name: Swift.String, attributes: [Swift.String : Measure.AttributeValue], timestamp: Swift.Int64?)
  final public func internalTrackEvent(data: [Swift.String : Any?], type: Swift.String, timestamp: Swift.Int64, attributes: [Swift.String : Any?], userDefinedAttrs: [Swift.String : Measure.AttributeValue], userTriggered: Swift.Bool, sessionId: Swift.String?, threadName: Swift.String?)
  @objc final public func trackEvent(_ name: Swift.String, attributes: [Swift.String : Any], timestamp: Foundation.NSNumber?)
  @objc final public func trackScreenView(_ screenName: Swift.String)
  @objc final public func setUserId(_ userId: Swift.String)
  @objc final public func clearUserId()
  @objc final public func getCurrentTime() -> Swift.Int64
  final public func startSpan(name: Swift.String) -> any Measure.Span
  final public func startSpan(name: Swift.String, timestamp: Swift.Int64) -> any Measure.Span
  final public func createSpanBuilder(name: Swift.String) -> (any Measure.SpanBuilder)?
  final public func getTraceParentHeaderValue(span: any Measure.Span) -> Swift.String
  final public func getTraceParentHeaderKey() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SpanOb) public class SpanOb : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Measure.SpanOb {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Measure.SpanOb>
  @objc @NSManaged dynamic public var attributes: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var batchId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var checkpoints: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var duration: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var endTime: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var hasEnded: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isSampled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var parentId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sessionId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var spanId: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var startTime: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var status: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var traceId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userDefinedAttrs: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var startTimeString: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var endTimeString: Swift.String {
    @objc get
    @objc set
  }
}
public struct MSRNetworkInterceptor {
  public static func enable(on sessionConfiguration: Foundation.URLSessionConfiguration)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class MsrViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func loadView()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension Measure.SpanStatus : Swift.Equatable {}
extension Measure.SpanStatus : Swift.Hashable {}
extension Measure.SpanStatus : Swift.RawRepresentable {}
extension Measure.VCLifecycleEventType : Swift.Equatable {}
extension Measure.VCLifecycleEventType : Swift.Hashable {}
extension Measure.VCLifecycleEventType : Swift.RawRepresentable {}
@available(iOS 13, macOS 10.15, tvOS 13, watchOS 6.0, *)
extension Measure.MsrMoniterView : Swift.Sendable {}
