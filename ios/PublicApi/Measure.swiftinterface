// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.19.9 clang-1700.3.19.1)
// swift-module-flags: -target arm64-apple-ios12-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name Measure
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import AVKit
import CoreData
import CoreMotion
import CoreTelephony
import CrashReporter
import Foundation
import MachO
import Network
import Photos
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
import os.signpost
public enum AttributeValue {
  case string(Swift.String)
  case boolean(Swift.Bool)
  case int(Swift.Int)
  case long(Swift.Int64)
  case float(Swift.Float)
  case double(Swift.Double)
}
extension Measure.AttributeValue : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc final public class BaseMeasureConfig : ObjectiveC.NSObject, Swift.Codable {
  required public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  #if compiler(>=5.3) && $NonescapableTypes
  public init(enableLogging: Swift.Bool? = nil, samplingRateForErrorFreeSessions: Swift.Float? = nil, traceSamplingRate: Swift.Float? = nil, trackHttpHeaders: Swift.Bool? = nil, trackHttpBody: Swift.Bool? = nil, httpHeadersBlocklist: [Swift.String]? = nil, httpUrlBlocklist: [Swift.String]? = nil, httpUrlAllowlist: [Swift.String]? = nil, autoStart: Swift.Bool? = nil, trackViewControllerLoadTime: Swift.Bool? = nil, screenshotMaskLevel: Measure.ScreenshotMaskLevel? = nil, requestHeadersProvider: (any Measure.MsrRequestHeadersProvider)? = nil, maxDiskUsageInMb: Swift.Int? = nil)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc convenience public init(enableLogging: Swift.Bool, samplingRateForErrorFreeSessions: Swift.Float, traceSamplingRate: Swift.Float, trackHttpHeaders: Swift.Bool, trackHttpBody: Swift.Bool, httpHeadersBlocklist: [Swift.String], httpUrlBlocklist: [Swift.String], httpUrlAllowlist: [Swift.String], autoStart: Swift.Bool, trackViewControllerLoadTime: Swift.Bool, screenshotMaskLevel: Measure.ScreenshotMaskLevelObjc, requestHeadersProvider: (any Measure.MsrRequestHeadersProvider)?, maxDiskUsageInMb: Foundation.NSNumber?)
  #endif
  @objc deinit
}
public protocol Span {
  var traceId: Swift.String { get }
  var spanId: Swift.String { get }
  #if compiler(>=5.3) && $NonescapableTypes
  var parentId: Swift.String? { get }
  #endif
  var isSampled: Swift.Bool { get }
  @discardableResult
  func setStatus(_ status: Measure.SpanStatus) -> any Measure.Span
  @discardableResult
  func setParent(_ parentSpan: any Measure.Span) -> any Measure.Span
  @discardableResult
  func setCheckpoint(_ name: Swift.String) -> any Measure.Span
  @discardableResult
  func setName(_ name: Swift.String) -> any Measure.Span
  @discardableResult
  func setAttribute(_ key: Swift.String, value: Swift.String) -> any Measure.Span
  @discardableResult
  func setAttribute(_ key: Swift.String, value: Swift.Int) -> any Measure.Span
  @discardableResult
  func setAttribute(_ key: Swift.String, value: Swift.Double) -> any Measure.Span
  @discardableResult
  func setAttribute(_ key: Swift.String, value: Swift.Bool) -> any Measure.Span
  @discardableResult
  func setAttributes(_ attributes: [Swift.String : Measure.AttributeValue]) -> any Measure.Span
  @discardableResult
  func removeAttribute(_ key: Swift.String) -> any Measure.Span
  @discardableResult
  func end() -> any Measure.Span
  @discardableResult
  func end(timestamp: Swift.Int64) -> any Measure.Span
  func hasEnded() -> Swift.Bool
  func getDuration() -> Swift.Int64
}
public enum SpanStatus : Swift.Int64, Swift.Codable {
  case unset
  case ok
  case error
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.Int64)
  #endif
  public typealias RawValue = Swift.Int64
  public var rawValue: Swift.Int64 {
    get
  }
}
public protocol SpanBuilder {
  func setParent(_ span: any Measure.Span) -> any Measure.SpanBuilder
  func startSpan() -> any Measure.Span
  func startSpan(_ timestamp: Swift.Int64) -> any Measure.Span
}
@_inheritsConvenienceInitializers @objc(BatchOb) nonisolated public class BatchOb : CoreData.NSManagedObject {
  #if compiler(>=5.3) && $NonescapableTypes
  @objc override nonisolated dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  #endif
  @objc deinit
}
extension Measure.BatchOb {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Measure.BatchOb>
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var batchId: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  @objc @NSManaged nonisolated dynamic public var createdAt: Swift.Int64 {
    @objc get
    @objc set
  }
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var eventId: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var spanIds: Swift.String? {
    @objc get
    @objc set
  }
  #endif
}
@objc public class MsrText : ObjectiveC.NSObject {
  final public let reportBugTitle: Swift.String
  final public let descriptionPlaceholder: Swift.String
  final public let sendButton: Swift.String
  final public let screenshotButton: Swift.String
  final public let galleryButton: Swift.String
  final public let exitScreenshotMode: Swift.String
  public init(reportBugTitle: Swift.String, descriptionPlaceholder: Swift.String, sendButton: Swift.String, screenshotButton: Swift.String, galleryButton: Swift.String, exitScreenshotMode: Swift.String)
  #if compiler(>=5.3) && $NonescapableTypes
  public func update(reportBugTitle: Swift.String? = nil, descriptionPlaceholder: Swift.String? = nil, sendButton: Swift.String? = nil, screenshotButton: Swift.String? = nil, galleryButton: Swift.String? = nil, exitScreenshotMode: Swift.String? = nil) -> Measure.MsrText
  #endif
  @objc deinit
}
@objc final public class ClientInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(apiKey: Swift.String, apiUrl: Swift.String)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
@objc public class MsrFonts : ObjectiveC.NSObject {
  final public let title: UIKit.UIFont
  final public let button: UIKit.UIFont
  final public let placeholder: UIKit.UIFont
  public init(title: UIKit.UIFont, button: UIKit.UIFont, placeholder: UIKit.UIFont)
  #if compiler(>=5.3) && $NonescapableTypes
  public func update(title: UIKit.UIFont? = nil, button: UIKit.UIFont? = nil, placeholder: UIKit.UIFont? = nil) -> Measure.MsrFonts
  #endif
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(LifecycleManagerInternal) public class LifecycleManagerInternal : ObjectiveC.NSObject {
  @objc public static let shared: Measure.LifecycleManagerInternal
  @objc public func sendLifecycleEvent(_ event: Measure.VCLifecycleEventType, for viewController: UIKit.UIViewController)
  @objc override dynamic public init()
  @objc deinit
}
public enum ScreenshotMaskLevel : Swift.String, Swift.Codable, Swift.CaseIterable {
  case allTextAndMedia
  case allText
  case allTextExceptClickable
  case sensitiveFieldsOnly
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.String)
  #endif
  public typealias AllCases = [Measure.ScreenshotMaskLevel]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [Measure.ScreenshotMaskLevel] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum ScreenshotMaskLevelObjc : Swift.Int {
  case allTextAndMedia
  case allText
  case allTextExceptClickable
  case sensitiveFieldsOnly
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.Int)
  #endif
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class BugReportConfig : ObjectiveC.NSObject {
  final public let colors: Measure.MsrColors
  final public let text: Measure.MsrText
  final public let dimensions: Measure.MsrDimensions
  final public let fonts: Measure.MsrFonts
  public init(colors: Measure.MsrColors = BugReportConfig.default.colors, text: Measure.MsrText = BugReportConfig.default.text, dimensions: Measure.MsrDimensions = BugReportConfig.default.dimensions, fonts: Measure.MsrFonts = BugReportConfig.default.fonts)
  public static let `default`: Measure.BugReportConfig
  @objc deinit
}
@objc public class MsrColors : ObjectiveC.NSObject {
  final public let darkBackground: UIKit.UIColor
  final public let lightBackground: UIKit.UIColor
  final public let darkButtonBackground: UIKit.UIColor
  final public let lightButtonBackground: UIKit.UIColor
  final public let darkText: UIKit.UIColor
  final public let lightText: UIKit.UIColor
  final public let darkPlaceholder: UIKit.UIColor
  final public let lightPlaceholder: UIKit.UIColor
  final public let darkFloatingButtonBackground: UIKit.UIColor
  final public let lightFloatingButtonBackground: UIKit.UIColor
  final public let darkFloatingButtonIcon: UIKit.UIColor
  final public let lightFloatingButtonIcon: UIKit.UIColor
  final public let darkfloatingExitButtonText: UIKit.UIColor
  final public let lightfloatingExitButtonText: UIKit.UIColor
  final public let badgeColor: UIKit.UIColor
  final public let badgeTextColor: UIKit.UIColor
  final public let isDarkMode: Swift.Bool
  public var background: UIKit.UIColor {
    get
  }
  public var buttonBackground: UIKit.UIColor {
    get
  }
  public var text: UIKit.UIColor {
    get
  }
  public var placeholder: UIKit.UIColor {
    get
  }
  public var floatingButtonBackground: UIKit.UIColor {
    get
  }
  public var floatingButtonIcon: UIKit.UIColor {
    get
  }
  public var floatingExitButtonText: UIKit.UIColor {
    get
  }
  public init(darkBackground: UIKit.UIColor, lightBackground: UIKit.UIColor, darkButtonBackground: UIKit.UIColor, lightButtonBackground: UIKit.UIColor, darkText: UIKit.UIColor, lightText: UIKit.UIColor, darkPlaceholder: UIKit.UIColor, lightPlaceholder: UIKit.UIColor, darkFloatingButtonBackground: UIKit.UIColor, lightFloatingButtonBackground: UIKit.UIColor, darkFloatingButtonIcon: UIKit.UIColor, lightFloatingButtonIcon: UIKit.UIColor, darkfloatingExitButtonText: UIKit.UIColor, lightfloatingExitButtonText: UIKit.UIColor, badgeColor: UIKit.UIColor, badgeTextColor: UIKit.UIColor, isDarkMode: Swift.Bool)
  #if compiler(>=5.3) && $NonescapableTypes
  public func update(darkBackground: UIKit.UIColor? = nil, lightBackground: UIKit.UIColor? = nil, darkButtonBackground: UIKit.UIColor? = nil, lightButtonBackground: UIKit.UIColor? = nil, darkText: UIKit.UIColor? = nil, lightText: UIKit.UIColor? = nil, darkPlaceholder: UIKit.UIColor? = nil, lightPlaceholder: UIKit.UIColor? = nil, darkFloatingButtonBackground: UIKit.UIColor? = nil, lightFloatingButtonBackground: UIKit.UIColor? = nil, darkFloatingButtonIcon: UIKit.UIColor? = nil, lightFloatingButtonIcon: UIKit.UIColor? = nil, darkfloatingExitButtonText: UIKit.UIColor? = nil, lightfloatingExitButtonText: UIKit.UIColor? = nil, badgeColor: UIKit.UIColor? = nil, badgeTextColor: UIKit.UIColor? = nil, isDarkMode: Swift.Bool? = nil) -> Measure.MsrColors
  #endif
  @objc deinit
}
@objc public protocol MsrRequestHeadersProvider : ObjectiveC.NSObjectProtocol {
  @objc func getRequestHeaders() -> Foundation.NSDictionary
}
@objc public enum VCLifecycleEventType : Swift.Int, Swift.Codable {
  case viewDidLoad = 0
  case viewWillAppear = 1
  case viewDidAppear = 2
  case viewWillDisappear = 3
  case viewDidDisappear = 4
  case didReceiveMemoryWarning = 5
  case initWithNibName = 6
  case initWithCoder = 7
  case loadView = 8
  case vcDeinit = 9
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.Int)
  #endif
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class MsrAttachment : ObjectiveC.NSObject, Swift.Codable {
  final public let name: Swift.String
  final public let type: Measure.AttachmentType
  public var bytes: Foundation.Data?
  public var path: Swift.String?
  public var size: Swift.Int64
  public var id: Swift.String
  #if compiler(>=5.3) && $NonescapableTypes
  public init(name: Swift.String, type: Measure.AttachmentType, size: Swift.Int64, id: Swift.String, bytes: Foundation.Data? = nil, path: Swift.String? = nil)
  #endif
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class MsrDimensions : ObjectiveC.NSObject {
  final public let topPadding: CoreFoundation.CGFloat
  public init(topPadding: CoreFoundation.CGFloat)
  #if compiler(>=5.3) && $NonescapableTypes
  public func update(topPadding: CoreFoundation.CGFloat? = nil) -> Measure.MsrDimensions
  #endif
  @objc deinit
}
@available(iOS 13, macOS 10.15, tvOS 13, watchOS 6.0, *)
@_Concurrency.MainActor @preconcurrency public struct MsrMoniterView<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public init(_ viewName: Swift.String? = nil, content: @escaping () -> Content)
  #endif
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13, tvOS 13, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7Measure14MsrMoniterViewV4bodyQrvp", 0) __<Content>
}
@available(iOS 13, macOS 10.15, tvOS 13, watchOS 6.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public func moniterWithMsr(_ viewName: Swift.String? = nil) -> some SwiftUICore.View
  
  #endif
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class Measure : ObjectiveC.NSObject {
  @objc deinit
}
extension Measure.Measure {
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public static func initialize(with client: Measure.ClientInfo, config: Measure.BaseMeasureConfig? = nil)
  #endif
  @objc public static func start()
  @objc public static func stop()
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public static func getSessionId() -> Swift.String?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public static func internalTrackEvent(data: inout [Swift.String : Any?], type: Swift.String, timestamp: Swift.Int64, attributes: [Swift.String : Any?], userDefinedAttrs: [Swift.String : Measure.AttributeValue], userTriggered: Swift.Bool, sessionId: Swift.String?, threadName: Swift.String?, attachments: [Measure.MsrAttachment])
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public static func internalTrackSpan(name: Swift.String, traceId: Swift.String, spanId: Swift.String, parentId: Swift.String?, startTime: Swift.Int64, endTime: Swift.Int64, duration: Swift.Int64, status: Swift.Int64, attributes: [Swift.String : Any?], userDefinedAttrs: [Swift.String : Measure.AttributeValue], checkpoints: [Swift.String : Swift.Int64], hasEnded: Swift.Bool, isSampled: Swift.Bool)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public static func trackEvent(name: Swift.String, attributes: [Swift.String : Measure.AttributeValue], timestamp: Swift.Int64? = nil)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public static func trackEvent(_ name: Swift.String, attributes: [Swift.String : Any], timestamp: Foundation.NSNumber? = nil)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public static func trackScreenView(_ screenName: Swift.String, attributes: [Swift.String : Measure.AttributeValue]?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public static func trackScreenView(_ screenName: Swift.String, attributes: [Swift.String : Any]?)
  #endif
  @objc public static func setUserId(_ userId: Swift.String)
  @objc public static func clearUserId()
  @objc public static func getCurrentTime() -> Swift.Int64
  public static func startSpan(name: Swift.String) -> any Measure.Span
  public static func startSpan(name: Swift.String, timestamp: Swift.Int64) -> any Measure.Span
  #if compiler(>=5.3) && $NonescapableTypes
  public static func createSpanBuilder(name: Swift.String) -> (any Measure.SpanBuilder)?
  #endif
  public static func getTraceParentHeaderValue(span: any Measure.Span) -> Swift.String
  public static func getTraceParentHeaderKey() -> Swift.String
  #if compiler(>=5.3) && $NonescapableTypes
  public static func launchBugReport(takeScreenshot: Swift.Bool = true, bugReportConfig: Measure.BugReportConfig = .default, attributes: [Swift.String : Measure.AttributeValue]? = nil)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public static func launchBugReport(takeScreenshot: Swift.Bool = true, bugReportConfig: Measure.BugReportConfig = .default, attributes: [Swift.String : Any]? = nil)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public static func onShake(_ handler: (() -> Swift.Void)?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public static func trackBugReport(description: Swift.String, attachments: [Measure.MsrAttachment] = [], attributes: [Swift.String : Measure.AttributeValue]? = nil)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public static func trackBugReport(description: Swift.String, attachments: [Measure.MsrAttachment] = [], attributes: [Swift.String : Any]? = nil)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public static func captureScreenshot(for viewController: UIKit.UIViewController, completion: @escaping (Measure.MsrAttachment?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public static func captureLayoutSnapshot(for viewController: UIKit.UIViewController, completion: @escaping (Measure.MsrAttachment?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public static func trackError(_ error: any Swift.Error, attributes: [Swift.String : Measure.AttributeValue]? = nil, collectStackTraces: Swift.Bool = false)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public static func trackError(_ error: Foundation.NSError, attributes: [Swift.String : Any]? = nil, collectStackTraces: Swift.Bool = false)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public static func internalGetAttachmentDirectory() -> Swift.String?
  #endif
}
@_inheritsConvenienceInitializers @objc(SpanOb) nonisolated public class SpanOb : CoreData.NSManagedObject {
  #if compiler(>=5.3) && $NonescapableTypes
  @objc override nonisolated dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  #endif
  @objc deinit
}
extension Measure.SpanOb {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Measure.SpanOb>
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var attributes: Foundation.Data? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var batchId: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var checkpoints: Foundation.Data? {
    @objc get
    @objc set
  }
  #endif
  @objc @NSManaged nonisolated dynamic public var duration: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged nonisolated dynamic public var endTime: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged nonisolated dynamic public var hasEnded: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged nonisolated dynamic public var isSampled: Swift.Bool {
    @objc get
    @objc set
  }
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var parentId: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var sessionId: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  @objc @NSManaged nonisolated dynamic public var spanId: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged nonisolated dynamic public var startTime: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged nonisolated dynamic public var status: Swift.Int64 {
    @objc get
    @objc set
  }
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var traceId: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var userDefinedAttrs: Foundation.Data? {
    @objc get
    @objc set
  }
  #endif
  @objc @NSManaged nonisolated dynamic public var startTimeString: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged nonisolated dynamic public var endTimeString: Swift.String {
    @objc get
    @objc set
  }
}
public struct MSRNetworkInterceptor {
  public static func enable(on sessionConfiguration: Foundation.URLSessionConfiguration)
}
public enum AttachmentType : Swift.String, Swift.Codable {
  case screenshot
  case layoutSnapshot
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.String)
  #endif
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class MsrViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func loadView()
  @objc deinit
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  #endif
}
extension Measure.SpanStatus : Swift.Equatable {}
extension Measure.SpanStatus : Swift.Hashable {}
extension Measure.SpanStatus : Swift.RawRepresentable {}
extension Measure.ScreenshotMaskLevel : Swift.Equatable {}
extension Measure.ScreenshotMaskLevel : Swift.Hashable {}
extension Measure.ScreenshotMaskLevel : Swift.RawRepresentable {}
extension Measure.ScreenshotMaskLevelObjc : Swift.Equatable {}
extension Measure.ScreenshotMaskLevelObjc : Swift.Hashable {}
extension Measure.ScreenshotMaskLevelObjc : Swift.RawRepresentable {}
extension Measure.VCLifecycleEventType : Swift.Equatable {}
extension Measure.VCLifecycleEventType : Swift.Hashable {}
extension Measure.VCLifecycleEventType : Swift.RawRepresentable {}
@available(iOS 13, macOS 10.15, tvOS 13, watchOS 6.0, *)
extension Measure.MsrMoniterView : Swift.Sendable {}
extension Measure.AttachmentType : Swift.Equatable {}
extension Measure.AttachmentType : Swift.Hashable {}
extension Measure.AttachmentType : Swift.RawRepresentable {}
