// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios12-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-experimental-feature OpaqueTypeErasure -enable-bare-slash-regex -module-name Measure
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CoreData
import CoreTelephony
import CrashReporter
import Foundation
import MachO
import Network
import Photos
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
import os.signpost
public enum AttributeValue {
  case string(Swift.String)
  case boolean(Swift.Bool)
  case int(Swift.Int)
  case long(Swift.Int64)
  case float(Swift.Float)
  case double(Swift.Double)
}
@objc final public class BaseMeasureConfig : ObjectiveC.NSObject {
  public init(enableLogging: Swift.Bool? = nil, samplingRateForErrorFreeSessions: Swift.Float? = nil)
  @objc deinit
}
@objc final public class ClientInfo : ObjectiveC.NSObject {
  @objc public init(apiKey: Swift.String, apiUrl: Swift.String)
  @objc deinit
}
@objc public enum VCLifecycleEventType : Swift.Int, Swift.Codable {
  case viewDidLoad = 0
  case viewWillAppear = 1
  case viewDidAppear = 2
  case viewWillDisappear = 3
  case viewDidDisappear = 4
  case didReceiveMemoryWarning = 5
  case initWithNibName = 6
  case initWithCoder = 7
  case loadView = 8
  case vcDeinit = 9
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 13, macOS 10.15, tvOS 13, watchOS 6.0, *)
@_Concurrency.MainActor @preconcurrency public struct MsrMoniterView<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(_ viewName: Swift.String? = nil, content: @escaping () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13, tvOS 13, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7Measure14MsrMoniterViewV4bodyQrvp", 0) __<Content>
}
@available(iOS 13, macOS 10.15, tvOS 13, watchOS 6.0, *)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func moniterWithMsr(_ viewName: Swift.String? = nil) -> some SwiftUICore.View
  
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class Measure : ObjectiveC.NSObject {
  @objc public static let shared: Measure.Measure
  @objc final public func initialize(with client: Measure.ClientInfo, config: Measure.BaseMeasureConfig? = nil)
  final public func trackEvent(name: Swift.String, attributes: [Swift.String : Measure.AttributeValue], timestamp: Swift.Int64?)
  @objc final public func trackEvent(_ name: Swift.String, attributes: [Swift.String : Any], timestamp: Foundation.NSNumber?)
  @objc final public func trackScreenView(_ screenName: Swift.String)
  @objc final public func setUserId(_ userId: Swift.String)
  @objc final public func clearUserId()
  @objc deinit
}
public struct MsrNetworkInterceptor {
  public static func enable(on sessionConfiguration: Foundation.URLSessionConfiguration)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class MeasureViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func loadView()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension Measure.VCLifecycleEventType : Swift.Equatable {}
extension Measure.VCLifecycleEventType : Swift.Hashable {}
extension Measure.VCLifecycleEventType : Swift.RawRepresentable {}
@available(iOS 13, macOS 10.15, tvOS 13, watchOS 6.0, *)
extension Measure.MsrMoniterView : Swift.Sendable {}
