# Measure Docker Compose
#
# Guidelines
#
# Follow these guidelines for a consistently maintained
# compose file and a pleasurable maintainer experience.
#
# - Order first-party services at the top followed by
#   third-party services. Databases and other external
#   services should appear after measure services.
# - All environment variables MUST be passed using the
#   `environment` directive of each service. That's the
#   ONLY source of truth.
#
# Tips
#
# - For setting default values for any environment variable
#   Specify the default value after the hyphen (-). To set
#   empty default value do not specify anything after the
#   hyphen. See example below.
#
#   ```yaml
#   environment:
#     - MY_VAR=${MY_VAR:-default_value}
#     - EMPTY_MY_VAR=${EMPTY_MY_VAR:-}
#   ```

name: measure
services:
  dashboard:
    build:
      context: ../frontend/dashboard
    ports:
      - "3000:3000"
    environment:
      - API_BASE_URL=${API_BASE_URL}
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://0.0.0.0:3000"]
      interval: 5s
      timeout: 10s
      retries: 5
    develop:
      watch:
      - path: ../frontend/dashboard
        action: sync
        target: /app

  api:
    build:
      context: ../backend/api
    ports:
      - "8080:8080"
    environment:
      - POSTGRES_DSN=${POSTGRES_DSN}
      - CLICKHOUSE_DSN=${CLICKHOUSE_DSN}
      - AWS_ENDPOINT_URL=${AWS_ENDPOINT_URL}
      - SYMBOLS_S3_BUCKET=${SYMBOLS_S3_BUCKET}
      - SYMBOLS_S3_BUCKET_REGION=${SYMBOLS_S3_BUCKET_REGION}
      - SYMBOLS_ACCESS_KEY=${SYMBOLS_ACCESS_KEY}
      - SYMBOLS_SECRET_ACCESS_KEY=${SYMBOLS_SECRET_ACCESS_KEY}
      - SYMBOLICATOR_ORIGIN=${SYMBOLICATOR_ORIGIN}
      - ATTACHMENTS_S3_ORIGIN=${ATTACHMENTS_S3_ORIGIN:-}
      - ATTACHMENTS_S3_BUCKET=${ATTACHMENTS_S3_BUCKET}
      - ATTACHMENTS_S3_BUCKET_REGION=${ATTACHMENTS_S3_BUCKET_REGION}
      - ATTACHMENTS_ACCESS_KEY=${ATTACHMENTS_ACCESS_KEY}
      - ATTACHMENTS_SECRET_ACCESS_KEY=${ATTACHMENTS_SECRET_ACCESS_KEY}
      - SITE_ORIGIN=${NEXT_PUBLIC_SITE_URL}
      - API_ORIGIN=${NEXT_PUBLIC_API_BASE_URL}
      - OAUTH_GOOGLE_KEY=${OAUTH_GOOGLE_KEY}
      - OAUTH_GITHUB_KEY=${OAUTH_GITHUB_KEY}
      - OAUTH_GITHUB_SECRET=${OAUTH_GITHUB_SECRET}
      - SESSION_ACCESS_SECRET=${SESSION_ACCESS_SECRET}
      - SESSION_REFRESH_SECRET=${SESSION_REFRESH_SECRET}
      - OTEL_SERVICE_NAME=${OTEL_SERVICE_NAME}
      - OTEL_INSECURE_MODE=${OTEL_INSECURE_MODE}
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT}
    develop:
      watch:
        - path: ../backend/api
          action: rebuild
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:8080/ping"]
      interval: 5s
      timeout: 10s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      minio:
        condition: service_healthy
      symbolicator:
        condition: service_healthy
      dbmate-postgres:
        condition: service_completed_successfully
        required: false
      dbmate-clickhouse:
        condition: service_completed_successfully
        required: false
      migrator:
        condition: service_completed_successfully
        required: false
      mc:
        condition: service_completed_successfully
        required: false

  cleanup:
    build:
      context: ../backend/cleanup
    ports:
      - "8081:8081"
    environment:
      - POSTGRES_DSN=${POSTGRES_DSN}
      - CLICKHOUSE_DSN=${CLICKHOUSE_DSN}
      - AWS_ENDPOINT_URL=${AWS_ENDPOINT_URL}
      - ATTACHMENTS_S3_ORIGIN=${ATTACHMENTS_S3_ORIGIN}
      - ATTACHMENTS_S3_BUCKET=${ATTACHMENTS_S3_BUCKET}
      - ATTACHMENTS_S3_BUCKET_REGION=${ATTACHMENTS_S3_BUCKET_REGION}
      - ATTACHMENTS_ACCESS_KEY=${ATTACHMENTS_ACCESS_KEY}
      - ATTACHMENTS_SECRET_ACCESS_KEY=${ATTACHMENTS_SECRET_ACCESS_KEY}
      - OTEL_SERVICE_NAME=${OTEL_SERVICE_NAME}
      - OTEL_INSECURE_MODE=${OTEL_INSECURE_MODE}
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT}
    develop:
      watch:
        - path: ../backend/cleanup
          action: rebuild
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:8081/ping"]
      interval: 5s
      timeout: 10s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      minio:
        condition: service_healthy
      dbmate-postgres:
        condition: service_completed_successfully
        required: false
      dbmate-clickhouse:
        condition: service_completed_successfully
        required: false
      migrator:
        condition: service_completed_successfully
        required: false
      mc:
        condition: service_completed_successfully
        required: false

  symbolicator:
    image: ghcr.io/measure-sh/symbolicator
    ports:
      - "3021:3021"
    volumes:
      - ./symbolicator/config.yml:/etc/symbolicator/config.yml:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:3021/healthcheck || exit 1"]
      interval: 3s
      timeout: 10s
      retries: 5
    command: ["run", "-c", "/etc/symbolicator/config.yml"]

  minio:
    image: quay.io/minio/minio
    ports:
      - "9119:9000"
      - "9229:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    healthcheck:
      test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      interval: 3s
      timeout: 10s
      retries: 5
    volumes:
      - minio-data:/data

  mc:
    image: minio/mc
    profiles:
      - init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set msr-minio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      mc mb --ignore-existing msr-minio/${SYMBOLS_S3_BUCKET} msr-minio/${ATTACHMENTS_S3_BUCKET};
      exit 0;
      "

  dbmate-postgres:
    image: ghcr.io/amacneil/dbmate
    profiles:
      - migrate
    environment:
      - DATABASE_URL=${POSTGRES_MIGRATION_URL}
      - DBMATE_MIGRATIONS_DIR=/opt/postgres
      - DBMATE_SCHEMA_FILE=/opt/postgres/schema.sql
      - DBMATE_WAIT=true
      - DBMATE_STRICT=true
      - DBMATE_NO_DUMP_SCHEMA=true
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    volumes:
      - ./postgres:/opt/postgres
    command: ["migrate"]

  dbmate-clickhouse:
    image: ghcr.io/amacneil/dbmate
    profiles:
      - migrate
    environment:
      - DATABASE_URL=${CLICKHOUSE_DSN}
      - DBMATE_MIGRATIONS_DIR=/opt/clickhouse
      - DBMATE_SCHEMA_FILE=/opt/clickhouse/schema.sql
      - DBMATE_WAIT=true
      - DBMATE_STRICT=true
      - DBMATE_NO_DUMP_SCHEMA=true
    depends_on:
      clickhouse:
        condition: service_healthy
        restart: true
    volumes:
      - ./clickhouse:/opt/clickhouse
    command: ["migrate"]

  migrator:
    profiles:
      - migrate
    build:
      context: ../backend/migrator
    environment:
      - POSTGRES_DSN=${POSTGRES_DSN}
      - CLICKHOUSE_DSN=${CLICKHOUSE_DSN}
      - AWS_ENDPOINT_URL=${AWS_ENDPOINT_URL}
      - SYMBOLS_S3_BUCKET=${SYMBOLS_S3_BUCKET}
      - SYMBOLS_S3_BUCKET_REGION=${SYMBOLS_S3_BUCKET_REGION}
      - SYMBOLS_ACCESS_KEY=${SYMBOLS_ACCESS_KEY}
      - SYMBOLS_SECRET_ACCESS_KEY=${SYMBOLS_SECRET_ACCESS_KEY}
    develop:
      watch:
        - path: ../backend/migrator
          action: rebuild
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      minio:
        condition: service_healthy
      mc:
        condition: service_completed_successfully
        required: false
    volumes:
      - migrator-volume:/data
    command: ["migrate"]

  postgres:
    image: postgres:16.3-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    command: ["postgres", "-c", "log_statement=all"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 10s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  clickhouse:
    image: clickhouse/clickhouse-server:24.10-alpine
    environment:
      - CLICKHOUSE_USER=${CLICKHOUSE_USER}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}
    ports:
      - "9000:9000/tcp"
      - "8123:8123"
    healthcheck:
      test: ["CMD-SHELL", "clickhouse-client --query 'SELECT 1' || exit 1"]
      interval: 3s
      timeout: 10s
      retries: 5
    ulimits:
      nofile: 262144
    volumes:
      - clickhouse-volume:/var/lib/clickhouse
      - clickhouse-volume:/var/log/clickhouse-server
      - type: bind
        source: ./clickhouse/config/config.xml
        target: /etc/clickhouse-server/config.d/config.xml

volumes:
  clickhouse-volume:
  migrator-volume:
  minio-data:
  pgdata:
