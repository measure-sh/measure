# Measure Docker Compose
#
# Guidelines
# Follow these guidelines for a consistently maintained
# compose file and a pleasurable maintainer experience.
#
# - Order first-party services at the top followed by
#   third-party services. Databases and other external
#   services should appear after measure services.

name: measure
services:
  web:
    build:
      context: ../measure-web-app
    ports:
      - "3000:3000"
    environment:
      - API_BASE_URL=${API_BASE_URL}
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000"]
      interval: 5s
      timeout: 10s
      retries: 5
    volumes:
      - ../measure-web-app:/app
      - ../measure-web-app/public:/app/public
    depends_on:
      api:
        condition: service_healthy

  api:
    build:
      context: ../measure-backend/measure-go
    ports:
      - "8080:8080"
    environment:
      - POSTGRES_DSN=${POSTGRES_DSN}
      - CLICKHOUSE_DSN=${CLICKHOUSE_DSN}
      - AWS_ENDPOINT_URL=${AWS_ENDPOINT_URL}
      - SYMBOLS_S3_BUCKET=${SYMBOLS_S3_BUCKET}
      - SYMBOLS_S3_BUCKET_REGION=${SYMBOLS_S3_BUCKET_REGION}
      - SYMBOLS_ACCESS_KEY=${SYMBOLS_ACCESS_KEY}
      - SYMBOLS_SECRET_ACCESS_KEY=${SYMBOLS_SECRET_ACCESS_KEY}
      - SYMBOLICATOR_ORIGIN=${SYMBOLICATOR_ORIGIN}
      - ATTACHMENTS_S3_ORIGIN=${ATTACHMENTS_S3_ORIGIN}
      - ATTACHMENTS_S3_BUCKET=${ATTACHMENTS_S3_BUCKET}
      - ATTACHMENTS_S3_BUCKET_REGION=${ATTACHMENTS_S3_BUCKET_REGION}
      - ATTACHMENTS_ACCESS_KEY=${ATTACHMENTS_ACCESS_KEY}
      - ATTACHMENTS_SECRET_ACCESS_KEY=${ATTACHMENTS_SECRET_ACCESS_KEY}
      - SITE_ORIGIN=${NEXT_PUBLIC_SITE_URL}
      - OAUTH_GOOGLE_KEY=${OAUTH_GOOGLE_KEY}
      - OAUTH_GITHUB_KEY=${OAUTH_GITHUB_KEY}
      - OAUTH_GITHUB_SECRET=${OAUTH_GITHUB_SECRET}
      - SESSION_ACCESS_SECRET=${SESSION_ACCESS_SECRET}
      - SESSION_REFRESH_SECRET=${SESSION_REFRESH_SECRET}
      - OTEL_SERVICE_NAME=${OTEL_SERVICE_NAME}
      - OTEL_INSECURE_MODE=${OTEL_INSECURE_MODE}
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT}
    develop:
      watch:
        - path: ../measure-backend/measure-go
          action: rebuild
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/ping"]
      interval: 5s
      timeout: 10s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      minio:
        condition: service_healthy
      symbolicator-retrace:
        condition: service_healthy
      dbmate:
        condition: service_completed_successfully
        required: false
      mc:
        condition: service_completed_successfully
        required: false

  symbolicator-retrace:
    build:
      context: ../measure-backend/symbolicator-retrace
    ports:
      - "8181:8181"
    environment:
      - AWS_ENDPOINT_URL=${AWS_ENDPOINT_URL}
      - SYMBOLS_S3_BUCKET=${SYMBOLS_S3_BUCKET}
      - SYMBOLS_S3_BUCKET_REGION=${SYMBOLS_S3_BUCKET_REGION}
      - SYMBOLS_ACCESS_KEY=${SYMBOLS_ACCESS_KEY}
      - SYMBOLS_SECRET_ACCESS_KEY=${SYMBOLS_SECRET_ACCESS_KEY}
      - DEVELOPMENT_MODE=true
    volumes:
      - symbolicator-volume:/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:8181/ping || exit 1"]
      interval: 3s
      timeout: 10s
      retries: 5
    develop:
      watch:
        - path: ../measure-backend/symbolicator-retrace
          action: rebuild
    depends_on:
      minio:
        condition: service_healthy

  minio:
    image: quay.io/minio/minio
    ports:
      - "9119:9000"
      - "9229:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    healthcheck:
      test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      interval: 3s
      timeout: 10s
      retries: 5
    volumes:
      - minio-data:/data

  mc:
    image: minio/mc
    profiles:
      - init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set msr-minio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      mc mb --ignore-existing msr-minio/${SYMBOLS_S3_BUCKET} msr-minio/${ATTACHMENTS_S3_BUCKET};
      exit 0;
      "

  dbmate:
    image: ghcr.io/amacneil/dbmate
    profiles:
      - migrate
    environment:
      - POSTGRES_DSN=${POSTGRES_MIGRATION_URL}
      - CLICKHOUSE_DSN=${CLICKHOUSE_DSN}
      - DBMATE_MIGRATIONS_DIR=.
      - DBMATE_SCHEMA_FILE=./schema.sql
      - DBMATE_WAIT=true
      - DBMATE_NO_DUMP_SCHEMA=true
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      clickhouse:
        condition: service_healthy
        restart: true
    volumes:
      - ./clickhouse:/opt/clickhouse
      - ./postgres:/opt/postgres
      - ./dbmate.sh:/opt/entrypoint.sh
    entrypoint: /opt/entrypoint.sh

  postgres:
    image: postgres:16.3-alpine
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    command: ["postgres", "-c", "log_statement=all"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 10s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  clickhouse:
    image: clickhouse/clickhouse-server:24
    environment:
      - CLICKHOUSE_USER=${CLICKHOUSE_USER}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}
    ports:
      - "9000:9000/tcp"
      - "8123:8123"
    healthcheck:
      test: ["CMD-SHELL", "clickhouse-client --query 'SELECT 1' || exit 1"]
      interval: 3s
      timeout: 10s
      retries: 5
    ulimits:
      nofile: 262144
    volumes:
      - clickhouse-volume:/var/lib/clickhouse
      - clickhouse-volume:/var/log/clickhouse-server

volumes:
  clickhouse-volume:
  symbolicator-volume:
  minio-data:
  pgdata:
